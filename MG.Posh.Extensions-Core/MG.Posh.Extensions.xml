<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MG.Posh.Extensions</name>
    </assembly>
    <members>
        <member name="M:MG.Posh.Extensions.Bound.Add.AddBoundExtensions.AddParameter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds the specified parameter of the extending <see cref="T:System.Management.Automation.PSCmdlet"/> and it's current value to the cmdlet's BoundParameters.
            </summary>
            <typeparam name="TCmdlet"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <param name="cmdlet"></param>
            <param name="parameter">
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> of the cmdlet's parameter to add with its current value.
            </param>
            <exception cref="T:System.ArgumentException">
                An parameter with the same name has already been added to the BoundParameters dictionary.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                The member name of <paramref name="parameter"/> was not found.
            </exception>
        </member>
        <member name="T:MG.Posh.Extensions.Bound.BoundBuiltinParameterExtensions">
            <summary>
            An extension class providing methods for <see cref="T:System.Management.Automation.PSCmdlet"/> to easily check if specific built-in advanced parameters
            have been bound.
            </summary>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundBuiltinParameterExtensions.ContainsBuiltinParameter``1(``0,MG.Posh.Extensions.Bound.BuiltInParameter)">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified built-in parameter, returning <see langword="true"/> if bound.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Management.Automation.PSCmdlet"/> whose bound parameters are checked.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameter">The built-in parameter to check.</param>
            <returns></returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundBuiltinParameterExtensions.ContainsAllBuiltinParameter``1(``0,System.Collections.Generic.IEnumerable{MG.Posh.Extensions.Bound.BuiltInParameter})">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified built-in parameters, returning <see langword="true"/> if all are bound.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Management.Automation.PSCmdlet"/> whose bound parameters are checked.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameters">The collection of built-in parameters to check.</param>
            <returns></returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundBuiltinParameterExtensions.ContainsAnyBuiltinParameter``1(``0,MG.Posh.Extensions.Bound.BuiltInParameter[])">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified built-in parameter, returning <see langword="true"/> if any are bound.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Management.Automation.PSCmdlet"/> whose bound parameters are checked.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameters">The built-in parameter(s) to check.</param>
        </member>
        <member name="T:MG.Posh.Extensions.Bound.BoundParameterExtensions">
            <summary>
            An extension class providing methods for <see cref="T:System.Management.Automation.PSCmdlet"/> instances to easily check their BoundParameter dictionary.
            </summary>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsParameter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified member(s).
            </summary>
            <typeparam name="TCmdlet">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameter">The <see cref="T:System.Linq.Expressions.MemberExpression"/> containing the parameter name to check are bound.</param>
            <returns>Whether the <see cref="T:System.Management.Automation.PSCmdlet"/> contains the specified key.</returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAllParameters``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                all the specified member, returning <see langword="true"/> if all names are present.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameters">The instances of <see cref="T:System.Linq.Expressions.MemberExpression"/> containing the parameters' names to check are bound.</param>
            <returns>Whether the <see cref="T:System.Management.Automation.PSCmdlet"/> contains all of the specified keys.</returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAnyParameters``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                all the specified members, returning <see langword="true"/> if any of the names are present.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameters">The instances of <see cref="T:System.Linq.Expressions.MemberExpression"/> containing the parameters' names to check are bound.</param>
            <returns>
                Returns a <see cref="T:System.Boolean"/> value indicating if
                the <see cref="T:System.Management.Automation.PSCmdlet"/> contains any of the specified keys.
                If no parameter expressions are specified, then it will return whether or
                not any parameters have been bound at all.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAllParameters``1(``0,System.String[])">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified parameter name(s), returning <see langword="true"/> if all are bound.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameterNames">The parameter names to check are bound.</param>
            <returns>
                Returns a <see cref="T:System.Boolean"/> value indicating if
                the <see cref="T:System.Management.Automation.PSCmdlet"/> contains all of the specified keys.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAllParameterNames``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified collection of parameter names, returning <see langword="true"/> if all are bound.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameterNames">The collection of parameter names to check are bound.</param>
            <returns>
                Returns a <see cref="T:System.Boolean"/> value indicating if
                the <see cref="T:System.Management.Automation.PSCmdlet"/> contains all of the specified keys.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAnyParameterNames``1(``0,System.String[])">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified parameter name(s), returning <see langword="true"/> if any are bound.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameterNames">The parameter names to check are bound.  This argument can be <see cref="!:null"/>.</param>
            <returns>
                Returns a <see cref="T:System.Boolean"/> value indicating if
                the <see cref="T:System.Management.Automation.PSCmdlet"/> contains any of the specified keys.
                If no parameterNames are specified, then it will return whether or
                not any parameters have been bound at all.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsAnyParameterNames``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs a "ContainsKey" lookup on the current <see cref="P:System.Management.Automation.PSCmdlet.MyInvocation"/> BoundParameters against
                the specified collection of parameter names, returning <see langword="true"/> if any are bound.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> that the method is extending.</param>
            <param name="parameterNames">The parameter names to check are bound.</param>
            <returns>
                Returns a <see cref="T:System.Boolean"/> value indicating if
                the <see cref="T:System.Management.Automation.PSCmdlet"/> contains any of the specified keys.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.ContainsPositionalParameter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Checks if a parameter of a <see cref="T:System.Management.Automation.PSCmdlet"/> has been bound positionally.
            </summary>
            <typeparam name="TCmdlet"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> we are extending.</param>
            <param name="parameter">The expression of the cmdlet's parameter to check.</param>
            <returns>
                <see langword="true"/> if parameter's name is found within the <see cref="T:System.Management.Automation.InvocationInfo"/>'s 'BoundPositionally'
                list of parameter names.
                <see langword="false"/> if not or if the parameter does not exist.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.BoundParameterExtensions.GetPositionalParameters(System.Management.Automation.InvocationInfo)">
            <summary>
            Returns a read-only copy of those parameter names which have been bound positionally.
            </summary>
            <param name="info">The invocation info to retrieve the bound parameters dictionary from.</param>
            <returns>
                A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of strings which represent the parameter names that have been bound positionally.
            </returns>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.Remove.RemoveBoundExtensions.RemoveParameter``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Removes the specified parameter from the extending cmdlet's <see cref="P:System.Management.Automation.InvocationInfo.BoundParameters"/>.
            </summary>
            <typeparam name="TCmdlet"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <param name="cmdlet"></param>
            <param name="parameter">
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> of the cmdlet's parameter which will be removed by its <see cref="P:System.Reflection.MemberInfo.Name"/>.
            </param>
            <returns>
                <see langword="true"/> if the <see cref="P:System.Reflection.MemberInfo.Name"/> is successfully found and removed; otherwise,
                <see langword="false"/>.  This method returns <see langword="false"/> if the member's name is not found in 
                <see cref="P:System.Management.Automation.InvocationInfo.BoundParameters"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                The <see cref="P:System.Reflection.MemberInfo.Name"/> of <paramref name="parameter"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MG.Posh.Extensions.Bound.Remove.RemoveBoundExtensions.RemoveParameters``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Removes the specified parameter collection from the the extending cmdlet's <see cref="P:System.Management.Automation.InvocationInfo.BoundParameters"/>.
            </summary>
            <typeparam name="TCmdlet"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <param name="cmdlet"></param>
            <param name="expressions">The <see cref="T:System.Linq.Expressions.MemberExpression"/> collection which will be all be removed.</param>
            <exception cref="T:System.ArgumentNullException">
                A <see cref="P:System.Reflection.MemberInfo.Name"/> of one of the <paramref name="expressions"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MG.Posh.Extensions.Filters.FilterByExtensions.ThenFilterBy``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the given where clause.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="filterThis">The collection to filter.</param>
            <param name="runOnlyIf">Indicates whether to actually perform the 
            filter.  Useful in chaining these statements.</param>
            <param name="whereClause">The predicate used to filter the collection.</param>
            <returns>A filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:MG.Posh.Extensions.Filters.FilterByExtensions.ThenFilterBy``3(System.Collections.Generic.IEnumerable{``2},``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Func{``2,System.Boolean})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the given where clause.
            </summary>
            <remarks>Using the specified <see cref="T:System.Management.Automation.PSCmdlet"/> and expression, 
            it is determined first if the parameter was bound prior to filtering the collection.</remarks>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="TCmdlet"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <param name="filterThis">The collection to filter.</param>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> who bound parameters are checked.</param>
            <param name="cmdletParameter">The bound parameter expression to check.</param>
            <param name="runOnlyIf">Indicates whether to actually perform the 
            filter.  Useful in chaining these statements.</param>
            <param name="whereClause">The predicate used to filter the collection.</param>
            <returns>A filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:MG.Posh.Extensions.Filters.FilterByExtensions.FilterByWildcards(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters the given collection of strings and returns all which match any of the specified
            wildcard strings.
            </summary>
            <param name="itemCollection">The collection of strings to filter.</param>
            <param name="wildcardStrings">The collection of wildcard strings that will filter
            the incoming string collection.</param>
        </member>
        <member name="T:MG.Posh.Extensions.PSObjectExtensions">
            <summary>
            An extension class providing <see cref="T:System.Management.Automation.Cmdlet"/> methods of creating <see cref="T:System.Management.Automation.PSObject"/>
            structures from segments of other .NET classes and/or structs.
            </summary>
        </member>
        <member name="M:MG.Posh.Extensions.PSObjectExtensions.AddFromObject``2(System.Management.Automation.PSObject,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Adds a <see cref="T:System.Management.Automation.PSNoteProperty"/> to an existing <see cref="T:System.Management.Automation.PSObject"/> with the names
            and values of members of the specified object.
            </summary>
            <typeparam name="T"/>
            <typeparam name="TProp">The type of the object's member.</typeparam>
            <param name="pso">The <see cref="T:System.Management.Automation.PSObject"/> the method is extended.</param>
            <param name="obj">The object whose member expressions will be resolved and added to the <see cref="T:System.Management.Automation.PSObject"/>.</param>
            <param name="memberExpressions">The expression representations where the names and values will be populated from.</param>
        </member>
        <member name="M:MG.Posh.Extensions.PSObjectExtensions.ToPSObject(System.Collections.Hashtable)">
            <summary>
            Converts a <see cref="T:System.Collections.Hashtable"/> into a <see cref="T:System.Management.Automation.PSObject"/>.  All key/value pairs
            will be copied to a new <see cref="T:System.Management.Automation.PSObject"/> as <see cref="T:System.Management.Automation.PSNoteProperty"/> members.
            </summary>
            <remarks>If the provided <see cref="T:System.Collections.Hashtable"/> is empty, then <see langword="null"/>
            will be returned instead of an empty <see cref="T:System.Management.Automation.PSObject"/>.</remarks>
            <param name="ht">The hasthable to transform.</param>
        </member>
        <member name="T:MG.Posh.Extensions.Shoulds.ShouldExtensions">
            <summary>
            A class that extends <see cref="T:System.Management.Automation.PSCmdlet"/>'s "ShouldProcess" and "ShouldContinue" methods to accept
            formatted-strings with arguments.
            </summary>
        </member>
        <member name="M:MG.Posh.Extensions.Shoulds.ShouldExtensions.ShouldProcessFormat``1(``0,System.String,System.String,System.Object[])">
            <summary>
            Confirm the operation with the user.  Cmdlets which make changes (e.g. delete files, stop services, etc.) should call ShouldProcessFormat
            to give the user the opportunity to confirm that the operation should actually be performed.  The provided action will be formatted with the
            given arguments.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.PSCmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.PSCmdlet"/> the method is extending.</param>
            <param name="action">The action that should be performed.</param>
            <param name="target">A composite string format of the target resource being acted upon.  This will potentially be displayed to the user.</param>
            <param name="targetArguments">The object(s) to format.</param>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
            <returns>
            If ShouldProcessFormat returns true, the operation should be performed.  If ShouldProcessFormat returns false, the operation should not
            be performed, and the <see cref="T:System.Management.Automation.PSCmdlet"/> should move on to the next target resource.
            </returns>
        </member>
        <member name="T:MG.Posh.Extensions.Writes.WriteExtensions">
            <summary>
            A static class that extends <see cref="T:System.Management.Automation.Cmdlet"/>'s base "write" output stream methods to accept
            formatted-strings with arguments and write standard output.
            </summary>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.ThrowTerminatingError``1(``0,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Terminate the command and report the error.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="exception">This is an exception that describes the error.</param>
            <param name="errorId">The string used to construct the FullyQualifiedErrorId.</param>
            <param name="category">The category that best describes the error.</param>
            <param name="targetObject">This is the object against which the <see cref="T:System.Management.Automation.Cmdlet"/> or provider was operating on when the error occurred.</param>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteDebugFormat``1(``0,System.String,System.Object[])">
            <summary>
            Formats a given string and arguments and sends it to <see cref="M:System.Management.Automation.Cmdlet.WriteDebug(System.String)"/> to display debug information.
            </summary>
            <remarks>
            Use this to display debug information
            on the inner-workings of your <see cref="T:System.Management.Automation.Cmdlet"/>.  By default, debug output will not be displayed, although this can be configured
            with the DebugPreference shell variable or the -Debug command-line parameter.
            </remarks>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="formattedText">A composite format string for the debug output.</param>
            <param name="arguments">The object(s) to format.</param>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteArgumentError``1(``0,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Writes the specifed message as an <see cref="T:System.ArgumentException"/> with the target object to the error pipe.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="message">The message of the <see cref="T:System.ArgumentException"/>.</param>
            <param name="category">The category that best describes the error.</param>
            <param name="targetObject">This is the object against which the <see cref="T:System.Management.Automation.Cmdlet"/> or provider was operating on when the error occurred.
            This is optional.</param>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteError``1(``0,System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Writes the specified <see cref="T:System.Exception"/> with the target object to the error pipe.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="exception">This is an exception that describes the error.</param>
            <param name="errorId">The string used to construct the FullyQualifiedErrorId.</param>
            <param name="category">The category that best describes the error.</param>
            <param name="targetObject">This is the object against which the <see cref="T:System.Management.Automation.Cmdlet"/> or provider was operating on when the error occurred.
            This is optional.</param>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteError``2(``1,System.String,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Writes the specified message into the given <see cref="T:System.Exception"/> type provided all to the error pipe.
            </summary>
            <remarks><typeparamref name="T1"/> should have a public constructor that accepts a string (message) parameter.</remarks>
            <typeparam name="T2">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <typeparam name="T1">The type of exception to create in the <see cref="T:System.Management.Automation.ErrorRecord"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="message">The message of the <see cref="T:System.Exception"/>.</param>
            <param name="category">The category that best describes the error.</param>
            <param name="targetObject">This is the object against which the <see cref="T:System.Management.Automation.Cmdlet"/> or provider was operating on when the error occurred.</param>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteError``1(``0,System.String,System.Type,System.Management.Automation.ErrorCategory,System.Object)">
            <summary>
            Writes the specified message into the given <see cref="T:System.Exception"/> type provided all to the error pipe.
            </summary>
            <remarks><typeparamref name="T1"/> should have a public constructor that accepts a string (message) parameter.</remarks>
            <typeparam name="T2">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <typeparam name="T1">The type of exception to create in the <see cref="T:System.Management.Automation.ErrorRecord"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="message">The message of the <see cref="T:System.Exception"/>.</param>
            <param name="category">The category that best describes the error.</param>
            <param name="targetObject">This is the object against which the <see cref="T:System.Management.Automation.Cmdlet"/> or provider was operating on when the error occurred.</param>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteVerboseFormat``1(``0,System.String,System.Object[])">
            <summary>
            Formats a given string and arguments and sends it to <see cref="M:System.Management.Automation.Cmdlet.WriteVerbose(System.String)"/> to display verbose information.
            </summary>
            <remarks>
            Use this to display more detailed information
            about the activity of your <see cref="T:System.Management.Automation.Cmdlet"/>.  By default, verbose output will not be displayed, although this can be configured with the
            VerbosePreference shell variable or the -Verbose and -Debug command-line parameters.
            </remarks>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="formattedText">A composite format string for the verbose output.</param>
            <param name="arguments">The object(s) to format.</param>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteWarningFormat``1(``0,System.String,System.Object[])">
            <summary>
            Formats a given string and arguments and sends it to <see cref="M:System.Management.Automation.Cmdlet.WriteWarning(System.String)"/> to display warning information.
            </summary>
            <remarks>
            Use this to display more detailed 
            information about the activity of your <see cref="T:System.Management.Automation.Cmdlet"/>.  By default, warning output will not be displayed, although this can 
            be configured with the WarningPreference shell variable or the -Verbose and -Debug command-line parameters.
            </remarks>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="formattedText">A composite format string for the warning output.</param>
            <param name="arguments">The object(s) to format.</param>
            <exception cref="T:System.FormatException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
        <member name="M:MG.Posh.Extensions.Writes.WriteExtensions.WriteToPipeline``1(``0,System.Object,System.Boolean)">
            <summary>
            Sends an <see cref="T:System.Object"/> to the PowerShell output stream and optionally specifies whether or not to enumerate
            it if it's a collection.
            </summary>
            <typeparam name="T">The type of the inheriting <see cref="T:System.Management.Automation.Cmdlet"/>.</typeparam>
            <param name="cmdlet">The <see cref="T:System.Management.Automation.Cmdlet"/> the method is extending.</param>
            <param name="object">The object to send to the pipeline</param>
            <param name="enumerateCollection">Indicates whether the object will be enumerated as its sent.</param>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Management.Automation.PipelineStoppedException"/>
        </member>
    </members>
</doc>
